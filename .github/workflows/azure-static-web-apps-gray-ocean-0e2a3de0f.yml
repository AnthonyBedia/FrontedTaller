name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
# Agrega este paso ANTES del "Build And Deploy" en tu workflow
      - name: Verify Azure Token - Complete Check
        run: |
          echo "üîç Starting Azure Static Web Apps Token Verification..."
          echo "================================================="
          
          # 1. Verificar que el token existe
          if [ -z "$AZURE_TOKEN" ]; then
            echo "‚ùå FATAL: Token is empty or not found in GitHub Secrets"
            echo "   Please check that AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_OCEAN_0E2A3DE0F exists in repository secrets"
            exit 1
          fi
          
          # 2. Verificar longitud del token (los tokens v√°lidos suelen tener ~60+ caracteres)
          TOKEN_LENGTH=${#AZURE_TOKEN}
          echo "‚úÖ Token is present (length: $TOKEN_LENGTH characters)"
          
          if [ $TOKEN_LENGTH -lt 50 ]; then
            echo "‚ö†Ô∏è  WARNING: Token seems too short (${TOKEN_LENGTH} chars). Valid tokens are usually 60+ characters"
          fi
          
          # 3. Verificar formato b√°sico del token
          if [[ $AZURE_TOKEN =~ ^[A-Za-z0-9+/=_-]+$ ]]; then
            echo "‚úÖ Token format appears valid (alphanumeric with valid special chars)"
          else
            echo "‚ùå WARNING: Token contains unexpected characters"
          fi
          
          # 4. Verificar que no contenga espacios o saltos de l√≠nea
          if [[ $AZURE_TOKEN =~ [[:space:]] ]]; then
            echo "‚ùå ERROR: Token contains whitespace characters (spaces, tabs, newlines)"
            echo "   Please regenerate the token and ensure no extra characters are copied"
            exit 1
          fi
          
          # 5. Mostrar primeros y √∫ltimos caracteres para identificaci√≥n (sin exponer el token completo)
          FIRST_CHARS=${AZURE_TOKEN:0:8}
          LAST_CHARS=${AZURE_TOKEN: -8}
          echo "‚úÖ Token preview: ${FIRST_CHARS}...${LAST_CHARS}"
          
          # 6. Verificar conectividad con Azure (usando curl)
          echo ""
          echo "üåê Testing Azure connectivity..."
          
          # Crear un archivo temporal con el token para la petici√≥n
          echo "$AZURE_TOKEN" > /tmp/azure_token.txt
          
          # Hacer una petici√≥n de verificaci√≥n usando la API de Azure Static Web Apps
          # Nota: Esta es una verificaci√≥n indirecta, ya que la API real se llama durante el despliegue
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $AZURE_TOKEN" \
            --max-time 10 \
            "https://management.azure.com/" 2>/dev/null || echo "000")
          
          if [ "$HTTP_STATUS" = "000" ]; then
            echo "‚ö†Ô∏è  Could not test Azure connectivity (network issue or timeout)"
            echo "   This doesn't necessarily mean the token is invalid"
          elif [ "$HTTP_STATUS" = "401" ]; then
            echo "‚ùå POTENTIAL ISSUE: Token authentication failed (HTTP 401)"
            echo "   The token might be invalid or expired"
            echo "   Consider regenerating the token in Azure Portal"
          elif [ "$HTTP_STATUS" = "403" ]; then
            echo "‚ö†Ô∏è  Token authenticated but has limited permissions (HTTP 403)"
            echo "   This might be normal for Static Web Apps tokens"
          else
            echo "‚úÖ Azure connectivity test passed (HTTP $HTTP_STATUS)"
          fi
          
          # 7. Verificar variables de entorno del GitHub Actions
          echo ""
          echo "üîß GitHub Actions Environment Check:"
          echo "   Repository: $GITHUB_REPOSITORY"
          echo "   Branch: $GITHUB_REF"
          echo "   Event: $GITHUB_EVENT_NAME"
          echo "   Actor: $GITHUB_ACTOR"
          
          # 8. Verificar que estamos en el contexto correcto
          if [ "$GITHUB_REPOSITORY_OWNER" = "" ]; then
            echo "‚ö†Ô∏è  WARNING: GitHub repository owner not detected"
          else
            echo "‚úÖ Running in repository: $GITHUB_REPOSITORY_OWNER"
          fi
          
          # 9. Limpiar archivo temporal
          rm -f /tmp/azure_token.txt
          
          echo ""
          echo "================================================="
          echo "‚úÖ Token verification completed"
          echo "   If you see any ‚ùå errors above, please fix them before deployment"
          echo "   If you see only ‚úÖ and ‚ö†Ô∏è warnings, the token should work for deployment"
          echo "================================================="
          
        env:
          AZURE_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_OCEAN_0E2A3DE0F }}

      # Paso adicional: Verificaci√≥n espec√≠fica para Static Web Apps
      - name: Validate Static Web Apps Configuration
        run: |
          echo "üèóÔ∏è  Validating Static Web Apps deployment configuration..."
          
          # Verificar que los archivos necesarios existen
          if [ ! -f "package.json" ]; then
            echo "‚ùå ERROR: package.json not found"
            exit 1
          fi
          
          if [ ! -f "index.html" ]; then
            echo "‚ùå ERROR: index.html not found in root directory"
            echo "   Make sure your index.html is in the root or adjust app_location in the workflow"
          fi
          
          # Verificar que el script de build existe en package.json
          if ! grep -q '"build"' package.json; then
            echo "‚ùå ERROR: 'build' script not found in package.json"
            echo "   Please check your package.json scripts section"
            exit 1
          else
            echo "‚úÖ Build script found in package.json"
            # Mostrar el comando de build
            BUILD_CMD=$(node -pe "JSON.parse(require('fs').readFileSync('package.json', 'utf8')).scripts.build")
            echo "   Build command: $BUILD_CMD"
          fi
          
          echo "‚úÖ All configuration checks passed"

      - name: Build And Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_OCEAN_0E2A3DE0F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          output_location: "dist"
          # Configuraci√≥n espec√≠fica para React + Vite
          app_build_command: "npm run build"
          skip_api_build: true

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GRAY_OCEAN_0E2A3DE0F }}
          action: "close"